meta {
  name: Check User Permission
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/api/v1/roles/me/check-permission
  body: json
  auth: bearer
}

headers {
  Content-Type: application/json
}

auth:bearer {
  token: {{accessToken}}
}

body:json {
  {
    "resource": "data",
    "action": "read"
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should contain permission check result", function() {
    const data = res.getBody();
    expect(data).to.have.property('success', true);
    expect(data).to.have.property('data');
    expect(data.data).to.have.property('has_permission');
    expect(data.data).to.have.property('resource');
    expect(data.data).to.have.property('action');
  });
  
  test("User should have data read permission", function() {
    const data = res.getBody();
    expect(data.data.has_permission).to.be.true;
    expect(data.data.resource).to.equal('data');
    expect(data.data.action).to.equal('read');
  });
}

docs {
  # Check User Permission

  Check if the currently authenticated user has a specific permission.

  ## Headers
  ```
  Authorization: Bearer <access_token>
  ```

  ## Request Body
  ```json
  {
    "resource": "data",
    "action": "read"
  }
  ```

  ### Body Parameters
  - `resource` (string, required): Resource type to check permission for (e.g., 'data', 'users', 'roles')
  - `action` (string, required): Action type to check permission for (e.g., 'read', 'write', 'create', 'delete')

  ## Success Response - Permission Granted (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "has_permission": true,
      "resource": "data",
      "action": "read",
      "granted_by_roles": [
        {
          "id": "550e8400-e29b-41d4-a716-446655440001",
          "name": "DATAENGINEER",
          "is_default": true,
          "assigned_at": "2024-01-15T14:30:00.000Z"
        },
        {
          "id": "550e8400-e29b-41d4-a716-446655440003",
          "name": "CUSTOM_ANALYST",
          "is_default": false,
          "assigned_at": "2024-01-15T15:00:00.000Z"
        }
      ]
    },
    "message": "Permission check completed successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Success Response - Permission Denied (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "has_permission": false,
      "resource": "users",
      "action": "delete",
      "granted_by_roles": []
    },
    "message": "Permission check completed successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Error Responses

  ### Bad Request (400)
  ```json
  {
    "success": false,
    "error": "Both 'resource' and 'action' parameters are required",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Unauthorized (401)
  ```json
  {
    "success": false,
    "error": "Authentication required",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Invalid Token (401)
  ```json
  {
    "success": false,
    "error": "Invalid or expired token",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Not Found (404)
  ```json
  {
    "success": false,
    "error": "Resource 'invalid_resource' or action 'invalid_action' not found in system",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Internal Server Error (500)
  ```json
  {
    "success": false,
    "error": "Internal server error",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Notes
  - Returns `has_permission: true` if the user has the requested permission through any of their active roles
  - Returns `has_permission: false` if the user does not have the requested permission
  - The `granted_by_roles` array shows which roles provide the permission (empty if permission not granted)
  - Checks for any permission that matches both the resource and action criteria
  - Only considers permissions from active roles assigned to the user
  - Requires valid authentication token
  - This endpoint uses POST method with JSON body for permission checking
}
