meta {
  name: Get Current User Permissions
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/api/v1/users/me/permissions
  body: none
  auth: bearer
}

params:query {
  resource: data
  action: read
}

headers {
  Content-Type: application/json
}

auth:bearer {
  token: {{accessToken}}
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should contain user permissions", function() {
    const data = res.getBody();
    expect(data).to.have.property('success', true);
    expect(data).to.have.property('data');
    expect(data.data).to.have.property('permissions');
    expect(data.data.permissions).to.be.an('array');
  });
  
  test("Should have at least one permission", function() {
    const data = res.getBody();
    expect(data.data.permissions.length).to.be.greaterThan(0);
  });
}

docs {
  # Get Current User Permissions

  Retrieve all permissions granted to the currently authenticated user through their assigned roles.

  ## Headers
  ```
  Authorization: Bearer <access_token>
  ```

  ## Query Parameters
  - `resource` (string, optional): Filter permissions by resource type (e.g., 'data', 'users', 'reports')
  - `action` (string, optional): Filter permissions by action type (e.g., 'read', 'write', 'create', 'delete')
  - `include_roles` (boolean): Include the roles that grant each permission (default: false)

  ## Success Response (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "permissions": [
        {
          "id": "perm-1",
          "name": "users.create",
          "resource": "users",
          "action": "create",
          "description": "Create new user accounts",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "name": "ACCOUNTADMIN",
              "is_default": true
            }
          ]
        },
        {
          "id": "perm-2",
          "name": "users.read",
          "resource": "users",
          "action": "read",
          "description": "Read user information",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "name": "ACCOUNTADMIN",
              "is_default": true
            }
          ]
        },
        {
          "id": "perm-3",
          "name": "data.create",
          "resource": "data",
          "action": "create",
          "description": "Create new data entries and datasets",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440001",
              "name": "DATAENGINEER",
              "is_default": true
            }
          ]
        },
        {
          "id": "perm-4",
          "name": "data.read",
          "resource": "data",
          "action": "read",
          "description": "Read access to data resources",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440001",
              "name": "DATAENGINEER",
              "is_default": true
            },
            {
              "id": "550e8400-e29b-41d4-a716-446655440003",
              "name": "CUSTOM_ANALYST",
              "is_default": false
            }
          ]
        },
        {
          "id": "perm-5",
          "name": "reports.create",
          "resource": "reports",
          "action": "create",
          "description": "Create new reports",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440003",
              "name": "CUSTOM_ANALYST",
              "is_default": false
            }
          ]
        }
      ]
    },
    "message": "User permissions retrieved successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Success Response with Filters (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "filters": {
        "resource": "data",
        "action": "read"
      },
      "permissions": [
        {
          "id": "perm-4",
          "name": "data.read",
          "resource": "data",
          "action": "read",
          "description": "Read access to data resources",
          "granted_by_roles": [
            {
              "id": "550e8400-e29b-41d4-a716-446655440001",
              "name": "DATAENGINEER",
              "is_default": true
            },
            {
              "id": "550e8400-e29b-41d4-a716-446655440003",
              "name": "CUSTOM_ANALYST",
              "is_default": false
            }
          ]
        }
      ]
    },
    "message": "User permissions retrieved successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Success Response without Role Details (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "permissions": [
        {
          "id": "perm-1",
          "name": "users.create",
          "resource": "users",
          "action": "create",
          "description": "Create new user accounts"
        },
        {
          "id": "perm-2",
          "name": "users.read",
          "resource": "users",
          "action": "read",
          "description": "Read user information"
        },
        {
          "id": "perm-3",
          "name": "data.create",
          "resource": "data",
          "action": "create",
          "description": "Create new data entries and datasets"
        }
      ]
    },
    "message": "User permissions retrieved successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Error Responses

  ### Unauthorized (401)
  ```json
  {
    "success": false,
    "error": "Authentication required",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Invalid Token (401)
  ```json
  {
    "success": false,
    "error": "Invalid or expired token",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Internal Server Error (500)
  ```json
  {
    "success": false,
    "error": "Internal server error",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Notes
  - Returns all unique permissions granted to the user through their assigned roles
  - Duplicate permissions from multiple roles are consolidated into a single entry
  - The `granted_by_roles` field shows which roles provide each permission (when `include_roles=true`)
  - Filters can be combined to narrow down the results
  - Only permissions from active roles are included
  - Requires valid authentication token
}
