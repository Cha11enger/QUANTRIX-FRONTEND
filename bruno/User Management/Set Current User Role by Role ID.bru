meta {
  name: Set Current User Role by Role ID
  type: http
  seq: 6
}

put {
  url: {{baseUrl}}/api/v1/users/me/current-role
  body: json
  auth: bearer
}

headers {
  Content-Type: application/json
}

auth:bearer {
  token: {{accessToken}}
}

body:json {
  {
    "role_id": "{{customRoleId}}"
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should confirm role change", function() {
    const data = res.getBody();
    expect(data).to.have.property('success', true);
    expect(data).to.have.property('data');
    expect(data.data).to.have.property('current_role_id');
    expect(data.data).to.have.property('role');
  });
  
  test("Role object should have required properties", function() {
    const data = res.getBody();
    const role = data.data.role;
    expect(role).to.have.property('id');
    expect(role).to.have.property('name');
    expect(role).to.have.property('description');
    expect(role).to.have.property('is_active', true);
  });
  
  test("Role ID should be present", function() {
    const data = res.getBody();
    expect(data.data.role.id).to.be.a('string');
    expect(data.data.role.id).to.not.be.empty;
  });
  
  test("Current role ID should match role ID", function() {
    const data = res.getBody();
    expect(data.data.current_role_id).to.equal(data.data.role.id);
  });
}

docs {
  # Set Current User Role by Role ID

  Assign a specific role to the currently authenticated user using a JSON request body with role ID.

  ## Headers
  ```
  Authorization: Bearer <access_token>
  ```

  ## Request Body
  ```json
  {
    "role_id": "550e8400-e29b-41d4-a716-446655440001"
  }
  ```

  ### Body Parameters
  - `role_id` (string, required): The UUID of the role to assign to the user

  ## Success Response - Role Assigned (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "current_role_id": "550e8400-e29b-41d4-a716-446655440001",
      "role": {
        "id": "550e8400-e29b-41d4-a716-446655440001",
        "name": "DATAENGINEER",
        "description": "Data engineering and processing capabilities",
        "is_default": true,
        "is_active": true,
        "assigned_at": "2024-01-15T16:00:00.000Z",
        "permissions": [
          {
            "id": "perm-1",
            "name": "data.read",
            "resource": "data",
            "action": "read",
            "description": "Read access to data resources"
          },
          {
            "id": "perm-2",
            "name": "data.write",
            "resource": "data",
            "action": "write",
            "description": "Write access to data resources"
          },
          {
            "id": "perm-3",
            "name": "data.create",
            "resource": "data",
            "action": "create",
            "description": "Create new data resources"
          }
        ]
      },
      "previous_role": {
        "id": "550e8400-e29b-41d4-a716-446655440002",
        "name": "VIEWER",
        "assigned_at": "2024-01-10T10:00:00.000Z"
      }
    },
    "message": "Role assigned successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Success Response - ACCOUNTADMIN Role (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "current_role_id": "520907c2-dc99-4240-b822-049e740bf0b1",
      "role": {
        "id": "520907c2-dc99-4240-b822-049e740bf0b1",
        "name": "ACCOUNTADMIN",
        "description": "Full administrative access to all system resources",
        "is_default": true,
        "is_active": true,
        "assigned_at": "2024-01-15T16:00:00.000Z",
        "permissions": [
          {
            "id": "perm-1",
            "name": "data.read",
            "resource": "data",
            "action": "read",
            "description": "Read access to data resources"
          },
          {
            "id": "perm-2",
            "name": "data.write",
            "resource": "data",
            "action": "write",
            "description": "Write access to data resources"
          },
          {
            "id": "perm-3",
            "name": "data.create",
            "resource": "data",
            "action": "create",
            "description": "Create new data resources"
          },
          {
            "id": "perm-4",
            "name": "data.delete",
            "resource": "data",
            "action": "delete",
            "description": "Delete data resources"
          },
          {
            "id": "perm-5",
            "name": "users.read",
            "resource": "users",
            "action": "read",
            "description": "Read user information"
          },
          {
            "id": "perm-6",
            "name": "users.write",
            "resource": "users",
            "action": "write",
            "description": "Modify user information"
          },
          {
            "id": "perm-7",
            "name": "users.create",
            "resource": "users",
            "action": "create",
            "description": "Create new users"
          },
          {
            "id": "perm-8",
            "name": "users.delete",
            "resource": "users",
            "action": "delete",
            "description": "Delete user accounts"
          },
          {
            "id": "perm-9",
            "name": "roles.read",
            "resource": "roles",
            "action": "read",
            "description": "Read role information"
          },
          {
            "id": "perm-10",
            "name": "roles.write",
            "resource": "roles",
            "action": "write",
            "description": "Modify role information"
          },
          {
            "id": "perm-11",
            "name": "roles.create",
            "resource": "roles",
            "action": "create",
            "description": "Create new roles"
          },
          {
            "id": "perm-12",
            "name": "roles.delete",
            "resource": "roles",
            "action": "delete",
            "description": "Delete roles"
          }
        ]
      },
      "previous_role": {
        "id": "687d2977-abee-4b15-afd8-9e58bb1d9df4",
        "name": "DATAENGINEER",
        "assigned_at": "2024-01-14T12:00:00.000Z"
      }
    },
    "message": "ACCOUNTADMIN role assigned successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Success Response - Custom Role (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "user_id": "550e8400-e29b-41d4-a716-446655440000",
      "current_role_id": "550e8400-e29b-41d4-a716-446655440005",
      "role": {
        "id": "550e8400-e29b-41d4-a716-446655440005",
        "name": "CUSTOM_ANALYST",
        "description": "Custom role for data analysis with specific permissions",
        "is_default": false,
        "is_active": true,
        "assigned_at": "2024-01-15T16:00:00.000Z",
        "permissions": [
          {
            "id": "perm-1",
            "name": "data.read",
            "resource": "data",
            "action": "read",
            "description": "Read access to data resources"
          },
          {
            "id": "perm-13",
            "name": "reports.create",
            "resource": "reports",
            "action": "create",
            "description": "Create new reports"
          }
        ]
      },
      "previous_role": null
    },
    "message": "Custom role assigned successfully",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Error Responses

  ### Bad Request (400)
  ```json
  {
    "success": false,
    "error": "Invalid request body. 'role_id' is required",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Bad Request - Invalid UUID (400)
  ```json
  {
    "success": false,
    "error": "Invalid role ID format. Must be a valid UUID",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Unauthorized (401)
  ```json
  {
    "success": false,
    "error": "Authentication required",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Invalid Token (401)
  ```json
  {
    "success": false,
    "error": "Invalid or expired token",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Forbidden (403)
  ```json
  {
    "success": false,
    "error": "Insufficient permissions to assign this role",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Role Not Found (404)
  ```json
  {
    "success": false,
    "error": "Role with ID '550e8400-e29b-41d4-a716-446655440999' not found",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### User Not Found (404)
  ```json
  {
    "success": false,
    "error": "User not found",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Conflict (409)
  ```json
  {
    "success": false,
    "error": "User already has this role assigned",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ### Internal Server Error (500)
  ```json
  {
    "success": false,
    "error": "Internal server error",
    "timestamp": "2024-01-15T16:00:00.000Z"
  }
  ```

  ## Notes
  - This endpoint uses PUT method with JSON body containing the role ID
  - Replaces the user's current role with the specified role
  - Returns both `current_role_id` and full `role` object for convenience
  - Returns information about the previous role (if any)
  - The `assigned_at` timestamp is updated to the current time
  - Includes all permissions associated with the new role
  - Users can only assign roles to themselves through this endpoint
  - Some roles may require special permissions to assign
  - Role assignment is immediate and affects user permissions instantly
  - Requires valid authentication token
  - Alternative to the path parameter version of role assignment
}
