meta {
  name: Logout User
  type: http
  seq: 6
}

post {
  url: {{baseUrl}}/api/v1/auth/logout
  body: json
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "refreshToken": "{{refreshToken}}"
  }
}

script:post-response {
  if (res.getStatus() === 200) {
    const data = res.getBody();
    if (data.success) {
      bru.setEnvVar("accessToken", "");
      bru.setEnvVar("refreshToken", "");
      bru.setEnvVar("userId", "");
      console.log("Logout successful, tokens cleared");
    }
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should contain success", function() {
    const data = res.getBody();
    expect(data).to.have.property('success', true);
  });
  
  test("Response should contain message", function() {
    const data = res.getBody();
    expect(data).to.have.property('message');
  });
}

docs {
  # Logout User

  Logout the authenticated user and invalidate tokens.

  ## Headers
  ```
  Authorization: Bearer <access_token>
  ```

  ## Request Body
  ```json
  {
    "refreshToken": "string"  // Refresh token to invalidate
  }
  ```

  ## Success Response (200 OK)
  ```json
  {
    "success": true,
    "message": "Logout successful",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ## Error Responses

  ### Unauthorized (401)
  ```json
  {
    "success": false,
    "error": "User not authenticated",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### Invalid Token (401)
  ```json
  {
    "success": false,
    "error": "Invalid or expired token",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### Missing Refresh Token (400 Bad Request)
  ```json
  {
    "success": false,
    "error": "Refresh token is required",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### Internal Server Error (500)
  ```json
  {
    "success": false,
    "error": "Internal server error during logout",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ## Notes
  - Requires valid JWT access token in Authorization header
  - Both access token and refresh token are invalidated
  - User must login again to access protected endpoints
  - Clear all stored tokens on the client side after successful logout
  - The refresh token in the request body is used to identify and invalidate the token pair
}