meta {
  name: Get Profile
  type: http
  seq: 5
}

get {
  url: {{baseUrl}}/api/v1/auth/profile
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

headers {
  Content-Type: application/json
}

script:post-response {
  if (res.getStatus() === 200) {
    const data = res.getBody();
    if (data.success && data.data) {
      bru.setEnvVar("userId", data.data.id);
      bru.setEnvVar("accountIdentifier", data.data.accountIdentifier);
      console.log("Profile retrieved successfully");
    }
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should contain success and data", function() {
    const data = res.getBody();
    expect(data).to.have.property('success', true);
    expect(data).to.have.property('data');
  });
  
  test("Data should contain user profile", function() {
    const data = res.getBody();
    expect(data.data).to.have.property('id');
    expect(data.data).to.have.property('username');
    expect(data.data).to.have.property('email');
    expect(data.data).to.have.property('accountIdentifier');
  });
}

docs {
  # Get User Profile

  Retrieve the authenticated user's profile information.

  ## Headers
  ```
  Authorization: Bearer <access_token>
  ```

  ## Success Response (200 OK)
  ```json
  {
    "success": true,
    "data": {
      "id": "550e8400-e29b-41d4-a716-446655440000",
      "username": "testuser",
      "email": "testuser@example.com",
      "accountIdentifier": "ACCT-12345678",
      "organizationName": "Test Organization",
      "accountName": "Test Account",
      "companyName": "Test Company",
      "role": "ACCOUNTADMIN",
      "roles": ["ACCOUNTADMIN", "DATAENGINEER", "DATAANALYST", "VIEWER"],
      "isActive": true
    },
    "message": "User profile retrieved successfully",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ## Error Responses

  ### Unauthorized (401)
  ```json
  {
    "success": false,
    "error": "User not authenticated",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### Invalid Token (401)
  ```json
  {
    "success": false,
    "error": "Invalid or expired token",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### User Not Found (404)
  ```json
  {
    "success": false,
    "error": "User not found",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ### Internal Server Error (500)
  ```json
  {
    "success": false,
    "error": "Internal server error while retrieving user profile",
    "timestamp": "2024-01-15T10:30:00.000Z"
  }
  ```

  ## Notes
  - Requires valid JWT access token in Authorization header
  - Returns complete user profile including roles and permissions
  - The 'role' field shows the current active role
  - The 'roles' array shows all assigned roles
  - Profile information is updated in real-time
}